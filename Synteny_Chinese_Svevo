```
#!/bin/bash
#SBATCH --account=co_minium
#SBATCH --partition=savio4_htc
#SBATCH --exclusive
#SBATCH --nodes=1
#SBATH --qos=minium_htc4_normal
#SBATCH --time=72:00:00
minimap2 -f100 -x asm20 -t 8 /global/scratch/users/jiaqitang0422/Tomato/10.Kronos_QC/split_kronos/Kronos.v1.1_7B.fa /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/Chinese_spring_7B.fa -o minimap_K.CS_7B.out.paf
```
**MInimap2 reference(target fa) comes first, and then is the query fa
```
(base) [jiaqitang0422@n0180 Kronos]$ minimap2 --help
Usage: minimap2 [options] <target.fa>|<target.idx> [query.fa] [...]
```
```
#!/bin/bash
#SBATCH --account=co_minium
#SBATCH --partition=savio4_htc
#SBATCH --exclusive
#SBATCH --nodes=1
#SBATH --qos=minium_htc4_normal
#SBATCH --time=72:00:00
minimap2 -f100 -x asm20 -t 8 /global/scratch/users/jiaqitang0422/Tomato/10.Kronos_QC/split_kronos/Kronos.v1.1_3B.fa /global/scratch/users/jiaqitang0422/Kronos/Svevo.v1/Svevo.v1_3B.fna -o minimap_K.SV_3B.out.paf
```
```
#!/bin/bash
#SBATCH --account=co_minium
#SBATCH --partition=savio4_htc
#SBATCH --exclusive
#SBATCH --nodes=1
#SBATCH --cpus-per-task=56
#SBATH --qos=minium_htc4_normal
#SBATCH --time=72:00:00
minimap2 -f100 -x asm20 -t 56 Sohab_cornell_assembly.fna SH.haplotype-1.final.scaffolds.fa > minimap_hap1_cornell.out.paf
```
- Synteny generation:
LT934114.1
python synteny_plot.py minimap_K.CS_7B.out.paf 7B 7B
python synteny_plot.py minimap_K.SV_1B.out.paf LT934112.1 1B
scp jiaqitang0422@dtn.brc.berkeley.edu:/global/scratch/users/jiaqitang0422/Kronos/LT934111.1_vs_1A.global.svg /Users/r_upercut/Downloads/test/minimap2

"I have a task for you. You need to write a Python script that I can use on the cluster to create a new fasta file based on the given fasta file. I now have a fast file called "Kronos.collapsed.chromosomes.masked.v1.1.fa.NLR_loci.fa", and this file looks like this ">1A_2600127-2634529
TTGGCATGTCTAATTGAAGGAGCTGACTGCTAAAAAAATTGAATGAGCCGTGTGTTTTTCTCAGGCGAATTGGGTTAGTCATGGGTTCCCAGGGGCATTGCTCCATGTTGCTCGATTAGTCACTGTCTGTTGCATGCTCAACCAGCTGTTTAGTGTTTGCTTTCCATTTTTTTATAGAGGAATTAGGGGTATGAACTGATTGAATAGGCCAATGTGCATGCACCAA...
>1A_7144666-7177894
tgcttgcaaagtttcatcatggaattacattcatggaatttgtcagaaaaataaaataaaattagcactccaaactgtttttgagaataacttttgtgaagcattgtatttgtttcctttgccacgtcgcccatgaatttcattctgtgatgaaactttgcaagaaatcaaaacatttgccaTATATAAAAGCATCTTCAACAGTGTCCATTTCTCCTAAAACTACC...
>1A_7229636-7290159
ctgacgttgagtaggcagataggccgaaattgttcaattctcacggcatctattttcttaggcaacaacgttatcgttccaaaattaagttggaacagctgcaagtgtcccgagaacaaatcatggaacatcggcatcaggtcccctttgataatatgccaacacttcttgtaaaactcagccgggaaaccatccggccccggagcctta...
>1A_8465878-8499976
aacaagagacagtaaaaaaggtttacgcagggtcttaatctaaaaagaatcctttaggacgggtccctactgcacgtctgcgcctgtgtctccgttgtgtcgtatcctggacgggcgtcgcacgacattcatctgtaaaagagaggaactgagttgaaaacgggtcgtgccgaaaaaagtttaaaataaacaaagtataaaatatataa...
>1A_8513644-8547934
attcgtgaatctaataaaatatcaatgaaattttggaaaatactcaaaaaaaattccgtgagtttcattttttgccctattttaaaaaatcatcgattcaaaaagtgttcatgaattctaaaactactcatgtattcggtaaatgttcatcaatttttttttgtgaattttagaaaatgcccaatttttttaaaatgattgtcgattcagaaagctgtt...
". The name of every scaffold follows the pattern {1A} which is the name of the chromosome the sequence is on, and the second part {7144666-7177894} which is the position of the segment sequence on that chromosome (recorded as {starting point}-{end point}). There are 14 chromosomes starting with 1A, 1B, 2A, 2B, 3A, 3B, 4A, 4B, and all the way to 7A and 7B. For each chromosome,
For each chromosome, create a dictionary storing the name of the chromosome as the key, and every segment (this means that the value is a list of tuples of the starting point and the ending point of each segment. Using these 14 intermediate dictionaries, I want you to merge overlapping segments into 1 segment with the new starting position and the ending position. 
If there are multiple overlapping segments, please merge all of them into 1 segment. After you get the position for new segments, you need to write a fasta file to record the segment name in {chromosome name}_{new starting position}-{new end position} and their sequence as well. You might have to parse the original fasta file to do this. Name the final output fasta file "New_Kronos_loci.fa""

```
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in Chinese_spring_1B.fa -out 1B -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in Chinese_spring_2B.fa -out 2B -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in Chinese_spring_1A.fa -out 1A -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in Svevo.v1_2A.fna -out 2A -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in 001_SV_2B_730000000_763000000.fa -out 001_SV_2B_730000000_763000000 -dbtype 'nucl'

#!/bin/bash
#SBATCH --account=co_minium
#SBATCH --partition=savio4_htc
#SBATCH --exclusive
#SBATCH --nodes=1
#SBATCH --qos=minium_htc4_normal
#SBATCH --time=72:00:00

/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query 001_K_2B_812819653_821568195.fa -db ./001_SV_2B_730000000_763000000 -outfmt "6 std qlen slen" -out K.SV_812819653_821568195.blast.out -evalue 1e-6

#!/bin/bash
#SBATCH --account=co_minium
#SBATCH --partition=savio4_htc
#SBATCH --exclusive
#SBATCH --nodes=1
#SBATCH --qos=minium_htc4_normal
#SBATCH --time=72:00:00
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/2B.fa -db ./2B -outfmt "6 std qlen slen" -out K.CS.2B.blast.out -evalue 1e-6 

#!/bin/bash
#SBATCH --account=co_minium
#SBATCH --partition=savio4_htc
#SBATCH --mem=512000
#SBATCH --exclusive
#SBATCH --nodes=1
#SBATCH --cpus-per-task=56
#SBATCH --qos=minium_htc4_normal
#SBATCH --time=72:00:00
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/2A.fa -db ./2A -outfmt "6 std qlen slen" -out K.SV.2A.blast.out -evalue 1e-6 -threads 56
```
```
#!/bin/bash
#SBATCH --account=co_minium
#SBATCH --partition=savio4_htc
#SBATCH --exclusive
#SBATCH --nodes=1
#SBATCH --qos=minium_htc4_normal
#SBATCH --time=72:00:00
python synteny_blast.py /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/K.CS.1A.blast.out 1A_6144666-19273033 1A --start 1 --end 13128367 --hstart 6144666 --hend 19273033 --alignment_length 2800 --resize_param 1000000

#!/bin/bash
#SBATCH --account=co_minium
#SBATCH --partition=savio4_htc
#SBATCH --mem=512000
#SBATCH --exclusive
#SBATCH --nodes=1
#SBATCH --cpus-per-task=56
#SBATCH --qos=minium_htc4_normal
#SBATCH --time=72:00:00
python blast_vertical_synteny.py 2nd.K.CS.1A.blast.out 1A_6144666-19273033 1A --hstart 8144666 --hend 21273033

python test_blast_vertical_synteny.py K.CS.1A.blast.out 1A_6144666-19273033 1A 
python synteny_blast.py my_blast_output.txt "1A_6144666-19273033" "2A_50000-150000"

python 
scp jiaqitang0422@dtn.brc.berkeley.edu:/global/scratch/users/jiaqitang0422/Kronos/genome_paf_synteny/CS/1A_vs_1A.global.svg /Users/r_upercut/Downloads/test/blast



python synteny_blast.py /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/K.SV.1A.blast.out 1A_8144666-19273033 1A --start 1 --end 13128367 --hstart 6144666 --hend 19273033 --alignment_length 2800 --resize_param 1000000

/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query 04B_06B_11B.fa -db ./NLR_synteny/db_filtered_chilense -outfmt "6 std qlen slen" -out hap1_VS_chilense.blast.out -evalue 1e-4 -num_threads 56

scp jiaqitang0422@dtn.brc.berkeley.edu:/global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/1B_1-16279279_vs_1B_0-36279279.synteny.png /Users/r_upercut/Downloads/test/blast
1A_6144666-19273033_vs_1A.local.1-13128367.png
```

- SCript for vertical line function added to the synteny_blast.fa file
```
# -*- coding: utf-8 -*-
"""
Visualizing Synteny Plots for BLAST Output (Tabular Format 6) with Loci Annotations
"""

import argparse
import matplotlib.pyplot as plt
import re
from Bio import SeqIO

def resize(num, param):
    """Scale a number by a resize parameter."""
    return int(num) / param

def parse_loci(loci_fasta):
    """
    Parses loci from the fasta file and stores them by chromosome.
    
    Args:
        loci_fasta (str): Path to the loci fasta file.

    Returns:
        dict: A dictionary mapping chromosomes to a list of (start, end) tuples.
    """
    loci = {}

    for record in SeqIO.parse(loci_fasta, "fasta"):
        match = re.match(r"(\w+)_(\d+)-(\d+)", record.id)
        if match:
            chrom, start, end = match.groups()
            start, end = int(start), int(end)
            if chrom not in loci:
                loci[chrom] = []
            loci[chrom].append((start, end))

    return loci

# Initialize the parser
parser = argparse.ArgumentParser(description='Generate a synteny plot from BLAST output with loci annotations.')
parser.add_argument('blast_file', help='Path to the BLAST output file.')
parser.add_argument('query', help='Query sequence name (e.g., "1A_6144666-19273033").')
parser.add_argument('hit', help='Hit sequence name for comparison.')
parser.add_argument('--loci_fasta', default="/global/scratch/users/jiaqitang0422/Kronos/Kronos.collapsed.chromosomes.masked.v1.1.fa.NLR_loci.fa",
                    help='Path to the loci fasta file.')
parser.add_argument('--alignment_length', type=int, default=7000, help='Minimum alignment length to be processed.')
parser.add_argument('--resize_param', type=int, default=1000000, help='Parameter to resize the plot (in Mb).')

# Parse arguments
args = parser.parse_args()

# Extract query chromosome, start, and end
query_match = re.match(r"(\w+)_(\d+)-(\d+)", args.query)
if not query_match:
    raise ValueError("Query name must follow the format {chromosome}_{start}-{end}")

query_chrom, query_start, query_end = query_match.groups()
query_start, query_end = int(query_start), int(query_end)

# Normalize start and end for plotting (start at 1)
adjusted_start = 1
adjusted_end = query_end - query_start + 1

# Lists to store coordinates
start_x, start_y, end_x, end_y = [], [], [], []

# Read BLAST file and extract relevant alignments
with open(args.blast_file, 'r') as file:
    for line in file:
        items = line.split()

        # Extract BLASTn fields
        qseqid = items[0]    # Query sequence ID
        sseqid = items[1]    # Subject sequence ID
        length = int(items[3])    # Alignment length
        qstart = int(items[6])    # Query start
        qend = int(items[7])      # Query end
        sstart = int(items[8])    # Subject start
        send = int(items[9])      # Subject end

        # Check if alignment is within the query range and meets length threshold
        if qseqid == args.query and sseqid == args.hit and length >= args.alignment_length:
            # Normalize query coordinates for plotting
            qstart_adj = qstart - query_start + 1
            qend_adj = qend - query_start + 1

            start_x.append(resize(qstart_adj, args.resize_param))
            end_x.append(resize(qend_adj, args.resize_param))
            start_y.append(resize(sstart, args.resize_param))
            end_y.append(resize(send, args.resize_param))

# Load loci
loci = parse_loci(args.loci_fasta)

# Plot with matplotlib
fig, ax = plt.subplots()

# Set x and y limits based on adjusted query and hit coordinates
ax.set_xlim(resize(adjusted_start, args.resize_param), resize(adjusted_end, args.resize_param))
ax.set_ylim(resize(adjusted_start, args.resize_param), resize(adjusted_end, args.resize_param))

# Plot synteny lines
for sx, sy, ex, ey in zip(start_x, start_y, end_x, end_y):
    ax.plot([sx, ex], [sy, ey], color='k')

# Plot loci as vertical green lines
if query_chrom in loci:
    for locus_start, locus_end in loci[query_chrom]:
        if query_start <= locus_start <= query_end:
            locus_adj_start = locus_start - query_start + 1
            ax.axvline(x=resize(locus_adj_start, args.resize_param), color='g', linestyle='--', linewidth=1)

        if query_start <= locus_end <= query_end:
            locus_adj_end = locus_end - query_start + 1
            ax.axvline(x=resize(locus_adj_end, args.resize_param), color='g', linestyle='--', linewidth=1)

# Customize plot
ax.set_xlabel(f'{query_chrom} ({query_start}-{query_end} bp)')
ax.set_ylabel(f'{args.hit} (Mb)')

# Save the plot
output_dir = '/global/scratch/users/jiaqitang0422/Kronos/Chinese_spring'
plt.savefig(f'{output_dir}/{args.query}_vs_{args.hit}.synteny.png', format='png')

print("Plot successfully saved!")

```
```
# -*- coding: utf-8 -*-
"""
Visualizing Synteny Plots for BLAST Output (Tabular Format 6) with Loci Annotations.
"""
import argparse
import matplotlib.pyplot as plt
import re
from Bio import SeqIO

def resize(num, param):
    """Scale a number by a resize parameter."""
    return int(num) / param

def parse_loci(loci_fasta):
    """
    Parses loci from the fasta file and stores them by chromosome.

    Args:
        loci_fasta (str): Path to the loci fasta file.

    Returns:
        dict: A dictionary mapping chromosomes to a list of middle positions of loci.
    """
    loci = {}

    for record in SeqIO.parse(loci_fasta, "fasta"):
        match = re.match(r"(\w+)_(\d+)-(\d+)", record.id)
        if match:
            chrom, start, end = match.groups()
            start, end = int(start), int(end)
            middle = (start + end) // 2  # Compute the middle of the locus
            if chrom not in loci:
                loci[chrom] = []
            loci[chrom].append(middle)  # Store middle point instead of start/end

    return loci

# Initialize the parser
parser = argparse.ArgumentParser(description='Generate a synteny plot from BLAST output with loci annotations.')
parser.add_argument('blast_file', help='Path to the BLAST output file.')
parser.add_argument('query', help='Query sequence name (e.g., "1A_6144666-19273033").')
parser.add_argument('hit', help='Hit sequence name for comparison.')
parser.add_argument('--loci_fasta', default="../Kronos.collapsed.chromosomes.masked.v1.1.fa.NLR_loci.fa",
                    help='Path to the loci fasta file.')
parser.add_argument('--alignment_length', type=int, default=10000, help='Minimum alignment length to be processed.')
parser.add_argument('--resize_param', type=int, default=1000000, help='Parameter to resize the plot (in Mb).')
parser.add_argument('--hstart', type=int, help='Starting coordinate for the hit (Y-axis).')
parser.add_argument('--hend', type=int, help='Ending coordinate for the hit (Y-axis).')

# Parse arguments
args = parser.parse_args()

# Extract query chromosome, start, and end
query_match = re.match(r"(\w+)_(\d+)-(\d+)", args.query)
if not query_match:
    raise ValueError("Query name must follow the format {chromosome}_{start}-{end}")

query_chrom, query_start, query_end = query_match.groups()
query_start, query_end = int(query_start), int(query_end)

# Set default hit start and end if not provided
if args.hstart is None:
    args.hstart = query_start
if args.hend is None:
    args.hend = query_end

# Normalize query start and end for plotting
adjusted_start = 1
adjusted_end = query_end - query_start

# Lists to store coordinates
start_x, start_y, end_x, end_y = [], [], [], []

# Read BLAST file and extract relevant alignments
with open(args.blast_file, 'r') as file:
    for line in file:
        items = line.split()

        # Extract BLASTn fields
        qseqid = items[0]    # Query sequence ID
        sseqid = items[1]    # Subject sequence ID
        length = int(items[3])    # Alignment length
        qstart = int(items[6])    # Query start
        qend = int(items[7])      # Query end
        sstart = int(items[8])    # Subject start
        send = int(items[9])      # Subject end

        # Check if alignment is within the query range and meets length threshold
        if qseqid == args.query and sseqid == args.hit and length >= args.alignment_length:

            start_x.append(resize(qstart, args.resize_param))
            end_x.append(resize(qend, args.resize_param))
            start_y.append(resize(sstart, args.resize_param))
            end_y.append(resize(send, args.resize_param))

# Load loci
loci = parse_loci(args.loci_fasta)

# Plot with matplotlib
fig, ax = plt.subplots()

# Set x and y limits based on adjusted query and hit coordinates
ax.set_xlim(resize(adjusted_start, args.resize_param), resize(adjusted_end, args.resize_param))
ax.set_ylim(resize(args.hstart, args.resize_param), resize(args.hend, args.resize_param))

# Plot synteny lines (alignment matches)
for sx, sy, ex, ey in zip(start_x, start_y, end_x, end_y):
    ax.plot([sx, ex], [sy, ey], color='k')

# Plot loci as solid green vertical lines at middle positions
if query_chrom in loci:
    for locus_middle in loci[query_chrom]:
        if query_start <= locus_middle <= query_end:
            locus_adj_middle = locus_middle - query_start
            ax.axvline(x=resize(locus_adj_middle, args.resize_param), color='g', linestyle='-', linewidth=1)

# Customize plot labels with **original query coordinates**
ax.set_xlabel(f'{query_chrom} ({query_start}-{query_end} bp)')
ax.set_ylabel(f'{args.hit} (Mb)')

# Save the plot
output_dir = '/global/scratch/users/jiaqitang0422/Kronos/Chinese_spring'
plt.savefig(f'{output_dir}/{args.query}_vs_{args.hit}.synteny.png', format='png')

print("Plot successfully saved!")
```

- Segmented run for the blast file
1. python prepare_blast.py New_Krnons_loci.fa Svevo.v1_1A.fna = Query FASTA: 001_K_1A_6144666_19273033.fa
Hit FASTA: 001_SV_1A_0_39273033.fa
BLAST DB: 001_SV_1A_0_39273033
SLURM script: run_blast_SV_6144666_19273033.sh

2. python prepare_blast.py New_Krnons_loci.fa Svevo.v1_1B.fna
Query FASTA: 001_K_1B_1_16279279.fa
Hit FASTA: 001_SV_1B_0_36279279.fa
BLAST DB: 001_SV_1B_0_36279279
SLURM script: run_blast_SV_1_16279279.sh

3. python prepare_blast.py New_Krnons_loci.fa Svevo.v1_2A.fna
Query FASTA: 001_K_2A_10797061_18441796.fa
Hit FASTA: 001_SV_2A_0_38441796.fa
BLAST DB: 001_SV_2A_0_38441796
SLURM script: run_blast_SV_10797061_18441796.sh

4. python prepare_blast.py New_Krnons_loci.fa Svevo.v1_2B.fna
Query FASTA: 001_K_2B_812819653_821568195.fa
Hit FASTA: 001_SV_2B_792819653_841568195.fa
BLAST DB: 001_SV_2B_792819653_841568195
SLURM script: run_blast_SV_812819653_821568195.sh

5. Svevo.v1_3A.fna
Query FASTA: 001_K_3A_709479001_714785400.fa
Hit FASTA: 001_SV_3A_689479001_734785400.fa
BLAST DB: 001_SV_3A_689479001_734785400
SLURM script: run_blast_SV_709479001_714785400.sh

6. Svevo.v1_3B.fna
Query FASTA: 001_K_3B_61893014_70588348.fa
Hit FASTA: 001_SV_3B_41893014_90588348.fa
BLAST DB: 001_SV_3B_41893014_90588348
SLURM script: run_blast_SV_61893014_70588348.sh

7. Svevo.v1_4A.fna
Query FASTA: 001_K_4A_742788751_767865717.fa
Hit FASTA: 001_SV_4A_722788751_787865717.fa
BLAST DB: 001_SV_4A_722788751_787865717
SLURM script: run_blast_SV_742788751_767865717.sh

8. Svevo.v1_4B.fna
Query FASTA: 001_K_4B_2287435_9190132.fa
Hit FASTA: 001_SV_4B_0_29190132.fa
BLAST DB: 001_SV_4B_0_29190132
SLURM script: run_blast_SV_2287435_9190132.sh

9 Svevo.v1_5A.fna
Query FASTA: 001_K_5A_18226803_23832148.fa
Hit FASTA: 001_SV_5A_0_43832148.fa
BLAST DB: 001_SV_5A_0_43832148
SLURM script: run_blast_SV_18226803_23832148.sh

10. Svevo.v1_5B.fna
Query FASTA: 001_K_5B_25087707_37743160.fa
Hit FASTA: 001_SV_5B_5087707_57743160.fa
BLAST DB: 001_SV_5B_5087707_57743160
SLURM script: run_blast_SV_25087707_37743160.sh

11. Svevo.v1_6A.fna 
Query FASTA: 001_K_6A_610739952_621701839.fa
Hit FASTA: 001_SV_6A_590739952_641701839.fa
BLAST DB: 001_SV_6A_590739952_641701839
SLURM script: run_blast_SV_610739952_621701839.sh

12. Svevo.v1_6B.fna 
Query FASTA: 001_K_6B_52322263_60605353.fa
Hit FASTA: 001_SV_6B_32322263_80605353.fa
BLAST DB: 001_SV_6B_32322263_80605353
SLURM script: run_blast_SV_52322263_60605353.sh

13. Svevo.v1_7A.fna 
Query FASTA: 001_K_7A_1_11887879.fa
Hit FASTA: 001_SV_7A_0_31887879.fa
BLAST DB: 001_SV_7A_0_31887879
SLURM script: run_blast_SV_1_11887879.sh

14. Svevo.v1_7B.fna 
Query FASTA: 001_K_7B_749873542_765942456.fa
Hit FASTA: 001_SV_7B_729873542_785942456.fa
BLAST DB: 001_SV_7B_729873542_785942456
SLURM script: run_blast_SV_749873542_765942456.sh

- Chinese Spring segmented blast run with largest overlapped loci
1. Chinese_spring_2B.fa
Query FASTA: 001_K_2B_812819653_821568195.fa
Hit FASTA: 001_CS_2B_792819653_841568195.fa
BLAST DB: 001_CS_2B_792819653_841568195
SLURM script: run_blast_CS_812819653_821568195.sh
2. Chinese_spring_3A.fa
Query FASTA: 001_K_3A_709479001_714785400.fa
Hit FASTA: 001_CS_3A_689479001_734785400.fa
BLAST DB: 001_CS_3A_689479001_734785400
SLURM script: run_blast_CS_709479001_714785400.sh
3. Chinese_spring_3B.fa
Query FASTA: 001_K_3B_61893014_70588348.fa
Hit FASTA: 001_CS_3B_41893014_90588348.fa
BLAST DB: 001_CS_3B_41893014_90588348
SLURM script: run_blast_CS_61893014_70588348.sh
4. Chinese_spring_4A.fa
Query FASTA: 001_K_4A_742788751_767865717.fa
Hit FASTA: 001_CS_4A_722788751_787865717.fa
BLAST DB: 001_CS_4A_722788751_787865717
SLURM script: run_blast_CS_742788751_767865717.sh
5. Chinese_spring_4B.fa
Query FASTA: 001_K_4B_2287435_9190132.fa
Hit FASTA: 001_CS_4B_0_29190132.fa
BLAST DB: 001_CS_4B_0_29190132
SLURM script: run_blast_CS_2287435_9190132.sh
6. Chinese_spring_5A.fa
Query FASTA: 001_K_5A_18226803_23832148.fa
Hit FASTA: 001_CS_5A_0_43832148.fa
BLAST DB: 001_CS_5A_0_43832148
SLURM script: run_blast_CS_18226803_23832148.sh
7. Chinese_spring_5B.fa
Query FASTA: 001_K_5B_25087707_37743160.fa
Hit FASTA: 001_CS_5B_5087707_57743160.fa
BLAST DB: 001_CS_5B_5087707_57743160
SLURM script: run_blast_CS_25087707_37743160.sh
8. Chinese_spring_6A.fa
Query FASTA: 001_K_6A_610739952_621701839.fa
Hit FASTA: 001_CS_6A_590739952_641701839.fa
BLAST DB: 001_CS_6A_590739952_641701839
SLURM script: run_blast_CS_610739952_621701839.sh
9. Chinese_spring_6B.fa
Query FASTA: 001_K_6B_52322263_60605353.fa
Hit FASTA: 001_CS_6B_32322263_80605353.fa
BLAST DB: 001_CS_6B_32322263_80605353
SLURM script: run_blast_CS_52322263_60605353.sh
10. Chinese_spring_7A.fa
Query FASTA: 001_K_7A_1_11887879.fa
Hit FASTA: 001_CS_7A_0_31887879.fa
BLAST DB: 001_CS_7A_0_31887879
SLURM script: run_blast_CS_1_11887879.sh
11. Chinese_spring_7B.fa
Query FASTA: 001_K_7B_749873542_765942456.fa
Hit FASTA: 001_CS_7B_729873542_785942456.fa
BLAST DB: 001_CS_7B_729873542_785942456
SLURM script: run_blast_CS_749873542_765942456.sh

```
  836  python blast_vertical_synteny.py K.CS_10797061_18441796.blast.out
  837  head -n 1 K.CS_1_11887879.blast.out
  838  python blast_vertical_synteny.py K.CS_10797061_18441796.blast.out 7A_1-11887879 7A_0-31887879
  839  head -n 1 K.CS_1_11887879.blast.out
  840  ls
  841  rm 7A_1-11887879_vs_7A_0-31887879.synteny.png
  842  head -n 1 K.CS_10797061_18441796.blast.out
  843  python blast_vertical_synteny.py K.CS_10797061_18441796.blast.out 2A_10797061-18441796 2A_0-38441796
  844  head -n 1 K.CS_1_11887879.blast.out
  845  python blast_vertical_synteny.py K.CS_1_11887879.blast.out 7A_1-11887879 7A_0-31887879
  846  head -n 1 K.CS_18226803_23832148.blast.out
  847  python blast_vertical_synteny.py K.CS_18226803_23832148.blast.out 5A_18226803-23832148 5A_0-43832148
  848  head -n 1 K.CS_2287435_9190132.blast.out 
  849  python blast_vertical_synteny.py K.CS_2287435_9190132.blast.out  4B_2287435-9190132 4B_0-29190132
  850  head -n 1 K.CS_25087707_37743160.blast.out 
  851  python blast_vertical_synteny.py K.CS_25087707_37743160.blast.out 5B_25087707-37743160 5B_5087707-57743160
  852  head -n 1 K.CS_52322263_60605353.blast.out 
  853  python blast_vertical_synteny.py K.CS_52322263_60605353.blast.out 6B_52322263-60605353 6B_32322263-80605353
  854  head -n 1 K.CS_610739952_621701839.blast.out
  855  python blast_vertical_synteny.py K.CS_610739952_621701839.blast.out 6A_610739952-621701839 6A_590739952-641701839
  856  head -n 1 K.CS_6144666_19273033.blast.out
  857  python blast_vertical_synteny.py K.CS_6144666_19273033.blast.out 1A_6144666-19273033 1A_0-39273033
  858  head -n 1 K.CS_61893014_70588348.blast.out
  859  python blast_vertical_synteny.py K.CS_61893014_70588348.blast.out 3B_61893014-70588348 3B_41893014-90588348
  860  head -n 1 K.CS_709479001_714785400.blast.out
  861  python blast_vertical_synteny.py K.CS_709479001_714785400.blast.out 3A_709479001-714785400 3A_689479001-734785400
  862  head -n 1 K.CS_742788751_767865717.blast.out
  863  python blast_vertical_synteny.py K.CS_742788751_767865717.blast.out 4A_742788751-767865717 4A_722788751-787865717
  864  head -n 1 K.CS_749873542_765942456.blast.out
  865  python blast_vertical_synteny.py K.CS_749873542_765942456.blast.out 7B_749873542-765942456 7B_729873542-785942456
  866  head -n 1 K.CS_812819653_821568195.blast.out
  867  python blast_vertical_synteny.py K.CS_812819653_821568195.blast.out 2B_812819653-821568195 2B_792819653-841568195
  868  ls
  869  ls -lh *png

  871  cd Svevo.v1/
  872  ls
  873  head -n 1 K.SV_10797061_18441796.blast.out
  874  python blast_vertical_synteny.py K.SV_10797061_18441796.blast.out 2A_10797061-18441796 2A_0-38441796 --hstart 7000000 --hend 17000000
  875  head -n 1 K.SV_1_11887879.blast.out
  876  python blast_vertical_synteny.py 7A_1-11887879 7A_0-31887879
  877  python blast_vertical_synteny.py  K.SV_1_11887879.blast.out 7A_1-11887879 7A_0-31887879 --hstart 0 --hend 13000000
  878  head -n 1 K.SV_1_16279279.blast.out
  879  python blast_vertical_synteny.py K.SV_1_16279279.blast.out 1B_1-16279279 1B_0-36279279
  880  head -n 1 K.SV_18226803_23832148.blast.out
  881  python blast_vertical_synteny.py K.SV_18226803_23832148.blast.out 5A_18226803-23832148 5A_0-43832148
  882  head -n 1 K.SV_2287435_9190132.blast.out
  883  python blast_vertical_synteny.py K.SV_2287435_9190132.blast.out 4B_2287435-9190132 4B_0-29190132 
  884  head -n 1 K.SV_25087707_37743160.blast.out
  885  python blast_vertical_synteny.py K.SV_25087707_37743160.blast.out 5B_25087707-37743160 5B_5087707-57743160 --hstart 1 --hend 12000000
  886  head -n 1 K.SV_52322263_60605353.blast.out
  887  python blast_vertical_synteny.py K.SV_52322263_60605353.blast.out 6B_52322263-60605353 6B_32322263-80605353 --hstart 11000000 --hend 2100000
  888  head -n 1 K.SV_610739952_621701839.blast.out
  889  python blast_vertical_synteny.py K.SV_610739952_621701839.blast.out 6A_610739952-621701839 6A_590739952-641701839 --hstart 16000000 --hend 26000000
  890  head -n 1 K.SV_6144666_19273033.blast.out
  891  python blast_vertical_synteny.py K.SV_6144666_19273033.blast.out 1A_6144666-19273033 1A_0-39273033
  892  head -n 1 K.SV_61893014_70588348.blast.out
  893  python blast_vertical_synteny.py K.SV_61893014_70588348.blast.out 3B_61893014-70588348 3B_41893014-90588348 --hstart 12000000 --hend 22000000
  894  head -n 1 K.SV_709479001_714785400.blast.out
  895  python blast_vertical_synteny.py K.SV_709479001_714785400.blast.out 3A_709479001-714785400 3A_689479001-734785400 --hstart 20000000 --hend 25000000
  896  head -n 1 K.SV_742788751_767865717.blast.out
  897  python blast K.SV_742788751_767865717.blast.out 4A_742788751-767865717 4A_722788751-787865717 --hstart 1 --hend 16000000

```
scp "jiaqitang0422@dtn.brc.berkeley.edu:/global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/png_SV*.png" /Users/r_upercut/Downloads/test/SV_freg/edits
scp "jiaqitang0422@dtn.brc.berkeley.edu:/global/scratch/users/jiaqitang0422/Kronos/genome_paf_synteny/SV/*.svg" /Users/r_upercut/Downloads/test/new_global/SV
scp "jiaqitang0422@dtn.brc.berkeley.edu:/global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/*.png" /Users/r_upercut/Downloads/test/start_end

scp jiaqitang0422@dtn.brc.berkeley.edu:/global/scratch/users/jiaqitang0422/Kronos/Svevo.v1/3B_61893014-70588348_vs_3B_41893014-90588348.synteny.png /Users/r_upercut/Downloads/test/SV_freg/edits
(base) [jiaqitang0422@n0184 Chinese_spring]$ python blast_vertical_synteny.py K.CS_812819653_821568195.blast.out 2B_812819653-821568195 2B_792819653-841568195 --hstart 1 --hend 700000000
Plot successfully saved!
(base) [jiaqitang0422@n0184 Chinese_spring]$ python blast_vertical_synteny.py K.CS_709479001_714785400.blast.out 3A_709479001-714785400 3A_689479001-734785400 --hstart 20000000 --hend 25000000
Plot successfully saved!
(base) [jiaqitang0422@n0184 Chinese_spring]$ python blast_vertical_synteny.py K.CS_2287435_9190132.blast.out  4B_2287435-9190132 4B_0-29190132 --hstart 1000000 --hend 8000000
Plot successfully saved!
(base) [jiaqitang0422@n0184 Chinese_spring]$ python blast_vertical_synteny.py K.CS_18226803_23832148.blast.out 5A_18226803-23832148 5A_0-43832148 --hstart 16000000 --hend 21500000
Plot successfully saved!
(base) [jiaqitang0422@n0184 Chinese_spring]$ python blast_vertical_synteny.py K.CS_25087707_37743160.blast.out 5B_25087707-37743160 5B_5087707-57743160 --hstart 1 --hend 12000000
Plot successfully saved!

- Minimap global swapped X/Y axis and its matches python script
```
# -*- coding: utf-8 -*-
"""
Visualizing Synteny Plots
"""

import argparse
import matplotlib.pyplot as plt

def resize(num, param):
    """Scale a number by a resize parameter."""
    return [int(num) / param]

# Initialize the parser
parser = argparse.ArgumentParser(description='Read a PAF file from minimap and produce a synteny plot in SVG format.')
parser.add_argument('paf', help='The path to a PAF file from minimap.')
parser.add_argument('query', help='The sequence name for a query to be visualized.')
parser.add_argument('hit', help='The sequence name for a hit to be compared to.')
parser.add_argument('--start', type=int, default=0, help='Starting coordinate of a query to be visualized. Default is 0.')
parser.add_argument('--end', type=int, default=None, help='Ending coordinate of a query to be visualized. Default is the last position of the query.')
parser.add_argument('--hstart', type=int, default=None, help='Starting coordinate of a hit to be visualized. Defaults to query start.')
parser.add_argument('--hend', type=int, default=None, help='Ending coordinate of a hit to be visualized. Defaults to query end.')
parser.add_argument('--alignment_length', type=int, default=5000, help='Minimum alignment length to be processed. Default is 50,000.')
parser.add_argument('--agp', default=None, help='agp file containing scaffolding information')

# Parse arguments
args = parser.parse_args()

# Determine figure type
fig_type = 'global' if args.start == 0 and args.end is None else f'local.{args.start}-{args.end}'

# Default values
alignment_type = "tp:A:P"
quality = 30
resize_param = 1000000  # Mb

# Lists to store coordinates
start_x, start_y, end_x, end_y = [], [], [], []

# Process each line
with open(args.paf, 'r') as file:
    for line in file:
        items = line.split()
        q, h = items[0], items[5]

        if q == args.query and h == args.hit:
            if args.end is None:
                args.end = int(items[1])
                args.hend = int(items[6])

            start_y += resize(items[2], resize_param)  # Swapped x and y
            end_y += resize(items[3], resize_param)  # Swapped x and y

            if items[4] == "+":
                start_x += resize(items[7], resize_param)  # Swapped x and y
                end_x += resize(items[8], resize_param)  # Swapped x and y
            else:
                start_x += resize(items[8], resize_param)  # Swapped x and y
                end_x += resize(items[7], resize_param)  # Swapped x and y

# Process a agp file if provided
vline = []
if not args.agp == None:
  for line in open(args.agp, 'r'):
    items = line.split('\t')
    if items[0] == args.query and items[6] == 'scaffold':
      vline.append( (int(items[1]) + 49) / resize_param )

# Set hit coordinates to follow query if not provided
if args.hstart is None: args.hstart = args.start
if args.hend is None: args.hend = args.end

# Plot with matplotlib
fig, ax = plt.subplots()

ax.set_xlim(args.hstart / resize_param, args.hend / resize_param)  # Swapped x and y
ax.set_ylim(args.start / resize_param, args.end / resize_param)  # Swapped x and y

# Plot each start and end point with lines connecting them
for sx, sy, ex, ey in zip(start_x, start_y, end_x, end_y):
    ax.plot([sx, ex], [sy, ey], color='k')

# Plot vertical lines
if len(vline) >= 1:
  plt.vlines(x=vline, ymin=args.start / resize_param, ymax=args.end / resize_param, color='g')  # Swapped x and y

# Customize plot
ax.set_xlabel(f'{args.hit} (Mb)')  # Swapped x and y labels
ax.set_ylabel(f'{args.hit} (Mb)')  # Changed y-axis label to match x-axis
ax.grid(True)

# Save and show the plot
plt.savefig(f'{args.query}_vs_{args.hit}.{fig_type}.svg', format='svg')


```

- Blast start/end synteny map
/global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end
```
import sys
from Bio import SeqIO

def extract_regions(fasta_file, region_size=20000000):
    """
    Extracts the first and last 20Mb regions from each chromosome in a given FASTA file.
    
    Args:
        fasta_file (str): Path to the input whole genome FASTA file.
        region_size (int): The size of the regions to extract (default is 20,000,000 bp).
    """
    # Read the genome FASTA file
    for record in SeqIO.parse(fasta_file, "fasta"):
        chrom_name = record.id  # Get chromosome name
        sequence = str(record.seq)  # Convert sequence to string
        chrom_length = len(sequence)  # Get chromosome length
        
        # Extract the start region (first 20Mb)
        start_seq = sequence[:region_size]
        start_filename = f"{chrom_name}_start.fa"
        with open(start_filename, "w") as start_file:
            start_file.write(f">{chrom_name}_start\n")
            for i in range(0, len(start_seq), 80):  # Format to 80 bp per line
                start_file.write(start_seq[i:i+80] + "\n")

        # Extract the end region (last 20Mb)
        if chrom_length > region_size:
            end_seq = sequence[-region_size:]
            end_filename = f"{chrom_name}_end.fa"
            with open(end_filename, "w") as end_file:
                end_file.write(f">{chrom_name}_end\n")
                for i in range(0, len(end_seq), 80):  # Format to 80 bp per line
                    end_file.write(end_seq[i:i+80] + "\n")

        print(f"✅ Extracted {chrom_name}_start.fa and {chrom_name}_end.fa")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python extract_chromosome_regions.py <whole_genome_fasta>")
        sys.exit(1)

    fasta_file = sys.argv[1]
    extract_regions(fasta_file)
```
python extract_chr_start_end.py ../Svevo.v1_1B.fna
Usage: `python extract_chr_start_end.py /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/Chinese_spring_1B.fa 
✅ Extracted 1B_start.fa and 1B_end.fa`
Making blast database: /global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in 1A_end.fa -out 1A_end -dbtype 'nucl'
scp "jiaqitang0422@dtn.brc.berkeley.edu:/global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/*.png" /Users/r_upercut/Downloads/test/start_end
Blast run slurm job:
```
#!/bin/bash
#SBATCH --account=co_minium
#SBATCH --partition=savio4_htc
#SBATCH --exclusive
#SBATCH --nodes=1
#SBATCH --qos=minium_htc4_normal
#SBATCH --time=72:00:00
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/7B_end.fa -db ./CS_start_end/7B_end -outfmt "6 std qlen slen" -out K.CS.7B_end.blast.out -evalue 1e-6 
#!/bin/bash
#SBATCH --account=ac_kvkallow
#SBATCH --partition=savio3
#SBATCH --nodes=1
#SBATCH --qos=savio_normal
#SBATCH --time=72:00:00
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/4B_end.fa -db ../SV_start_end/4B_end -outfmt "6 std qlen slen" -out K.SV.4B_end.blast.out -evalue 1e-6
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/4B_start.fa -db ../SV_start_end/4B_start -outfmt "6 std qlen slen" -out K.SV.4B_start.blast.out -evalue 1e-6
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/1B_end.fa -db ../SV_start_end/1B_end -outfmt "6 std qlen slen" -out K.SV.1B_end.blast.out -evalue 1e-6

/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/1A_end.fa -db ../SV_start_end/1A_end -outfmt "6 std qlen slen" -out K.SV.1A_end.blast.out -evalue 1e-6
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/1A_start.fa -db ../SV_start_end/1A_start -outfmt "6 std qlen slen" -out K.SV.1A_start.blast.out -evalue 1e-6
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/1B_end.fa -db ../SV_start_end/1B_end -outfmt "6 std qlen slen" -out K.SV.1B_end.blast.out -evalue 1e-6
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/1B_start.fa -db ../SV_start_end/1B_start -outfmt "6 std qlen slen" -out K.SV.1B_start.blast.out -evalue 1e-6
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/2A_end.fa -db ../SV_start_end/2A_end -outfmt "6 std qlen slen" -out K.SV.2A_end.blast.out -evalue 1e-6
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/2A_start.fa -db ../SV_start_end/2A_start -outfmt "6 std qlen slen" -out K.SV.2A_start.blast.out -evalue 1e-6
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/2B_end.fa -db ../SV_start_end/2B_end -outfmt "6 std qlen slen" -out K.SV.2B_end.blast.out -evalue 1e-6
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/2B_start.fa -db ../SV_start_end/2B_start -outfmt "6 std qlen slen" -out K.SV.2B_start.blast.out -evalue 1e-6
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/3A_end.fa -db ../SV_start_end/3A_end -outfmt "6 std qlen slen" -out K.SV.3A_end.blast.out -evalue 1e-6
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/3A_start.fa -db ../SV_start_end/3A_start -outfmt "6 std qlen slen" -out K.SV.3A_start.blast.out -evalue 1e-6
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/3B_end.fa -db ../SV_start_end/3B_end -outfmt "6 std qlen slen" -out K.SV.3B_end.blast.out -evalue 1e-6
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/3B_start.fa -db ../SV_start_end/3B_start -outfmt "6 std qlen slen" -out K.SV.3B_start.blast.out -evalue 1e-6
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/4A_end.fa -db ../SV_start_end/4A_end -outfmt "6 std qlen slen" -out K.SV.4A_end.blast.out -evalue 1e-6
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/4A_start.fa -db ../SV_start_end/4A_start -outfmt "6 std qlen slen" -out K.SV.4A_start.blast.out -evalue 1e-6
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/4B_end.fa -db ../SV_start_end/4B_end -outfmt "6 std qlen slen" -out K.SV.4B_end.blast.out -evalue 1e-6
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/4B_start.fa -db ../SV_start_end/4B_start -outfmt "6 std qlen slen" -out K.SV.4B_start.blast.out -evalue 1e-6
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/7A_end.fa -db ../SV_start_end/7A_end -outfmt "6 std qlen slen" -out K.SV.7A_end.blast.out -evalue 1e-6
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/7A_start.fa -db ../SV_start_end/7A_start -outfmt "6 std qlen slen" -out K.SV.7A_start.blast.out -evalue 1e-6
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/7B_end.fa -db ../SV_start_end/7B_end -outfmt "6 std qlen slen" -out K.SV.7B_end.blast.out -evalue 1e-6
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/7B_start.fa -db ../SV_start_end/7B_start -outfmt "6 std qlen slen" -out K.SV.7B_start.blast.out -evalue 1e-6
```
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/7B_end.fa -db ../SV_start_end/7B_end -outfmt "6 std qlen slen" -out K.SV.7B_end.blast.out -evalue 1e-6
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/7B_start.fa -db ../SV_start_end/7B_start -outfmt "6 std qlen slen" -out K.SV.7B_start.blast.out -evalue 1e-6

```
Blast synteny slurm job:
```
#!/bin/bash
#SBATCH --account=co_minium
#SBATCH --partition=savio4_htc
#SBATCH --exclusive
#SBATCH --nodes=1
#SBATCH --qos=minium_htc4_normal
#SBATCH --time=72:00:00

#!/bin/bash
#SBATCH --account=ac_kvkallow
#SBATCH --partition=savio3_htc
#SBATCH --nodes=1
#SBATCH --qos=savio_normal
#SBATCH --time=72:00:00
python hit_rename_synteny_blast.py K.SV.4B_start.blast.out 4B_start LT934118.1_start --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.4B_end.blast.out 4B_end LT934118.1_end --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.5A_end.blast.out 5A_end LT934119.1_end --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.5B_end.blast.out 5B_end LT934120.1_end --alignment_length 10000 --hstart 0 --hend 20000000

python hit_rename_synteny_blast.py K.SV.5A_start.blast.out 5A_start LT934119.1_start --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.5B_start.blast.out 5B_start LT934120.1_start --alignment_length 10000 --hstart 0 --hend 20000000
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/6A_end.fa -db ../SV_start_end/6A_end -outfmt "6 std qlen slen" -out K.SV.6A_end.blast.out -evalue 1e-6
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/6A_start.fa -db ../SV_start_end/6A_start -outfmt "6 std qlen slen" -out K.SV.6A_start.blast.out -evalue 1e-6
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/6B_end.fa -db ../SV_start_end/6B_end -outfmt "6 std qlen slen" -out K.SV.6B_end.blast.out -evalue 1e-6
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/6B_start.fa -db ../SV_start_end/6B_start -outfmt "6 std qlen slen" -out K.SV.6B_start.blast.out -evalue 1e-6


python synteny_blast.py K.CS.1A_start.blast.out 1A_start 1A_start --alignment_length 10000 --hstart 0 --hend 20000000
```
```
#!/bin/bash
#SBATCH --account=ac_kvkallow
#SBATCH --partition=savio3
#SBATCH --nodes=1
#SBATCH --qos=savio_normal
#SBATCH --time=72:00:00

/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/5A_start.fa -db ../SV_start_end/5A_start -outfmt "6 std qlen slen" -out K.SV.5A_start.blast.out -evalue 1e-6
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/5B_start.fa -db ../SV_start_end/5B_start -outfmt "6 std qlen slen" -out K.SV.5B_start.blast.out -evalue 1e-6

#!/bin/bash
#SBATCH --account=ac_kvkallow
#SBATCH --partition=savio3
#SBATCH --nodes=1
#SBATCH --qos=savio_normal
#SBATCH --time=72:00:00
python hit_rename_synteny_blast.py K.SV.1A_end.blast.out 1A_end LT934111.1_end --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.1B_start.blast.out 1B_start LT934112.1_start --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.1B_end.blast.out 1B_end LT934112.1_end --alignment_length 12000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.2A_start.blast.out 2A_start LT934113.1_start --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.2A_end.blast.out 2A_end LT934113.1_end --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.2B_start.blast.out 2B_start LT934114.1_start --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.2B_end.blast.out 2B_end LT934114.1_end --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.3A_start.blast.out 3A_start LT934115.1_start --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.3A_end.blast.out 3A_end LT934115.1_end --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.3B_start.blast.out 3B_start LT934116.1_start --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.3B_end.blast.out 3B_end LT934116.1_end --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.4A_start.blast.out 4A_start LT934117.1_start --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.4A_end.blast.out 4A_end LT934117.1_end --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.5A_start.blast.out 5A_start LT934119.1_start --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.5A_end.blast.out 5A_end LT934119.1_end --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.5B_start.blast.out 5B_start LT934120.1_start --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.5B_end.blast.out 5B_end LT934120.1_end --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.6A_start.blast.out 6A_start LT934121.1_start --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.6A_end.blast.out 6A_end LT934121.1_end --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.6B_start.blast.out 6B_start LT934122.1_start --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.6B_end.blast.out 6B_end LT934122.1_end --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.7A_start.blast.out 7A_start LT934123.1_start --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.7A_end.blast.out 7A_end LT934123.1_end --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.7B_start.blast.out 7B_start LT934124.1_start --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.7B_end.blast.out 7B_end LT934124.1_end --alignment_length 10000 --hstart 0 --hend 20000000


python synteny_blast.py K.SV.4B_start.blast.out 4B_start LT934118.1_start --alignment_length 10000 --hstart 0 --hend 20000000
python synteny_blast.py K.SV.4B_end.blast.out 4B_end LT934118.1_end --alignment_length 10000 --hstart 0 --hend 20000000
python synteny_blast.py K.SV.1B_end.blast.out 1B_end LT934112.1_end --alignment_length 10000 --hstart 0 --hend 20000000

python hit_rename_synteny_blast.py K.SV.1A_start.blast.out 1A_start LT934111.1_start --alignment_length 10000 --hstart 0 --hend 20000000

python hit_rename_synteny_blast.py K.SV.1A_end.blast.out 1A_end LT934111.1_end --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.1B_start.blast.out 1B_start LT934112.1_start --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.1B_end.blast.out 1B_end LT934112.1_end --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.2A_start.blast.out 2A_start LT934113.1_start --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.2A_end.blast.out 2A_end LT934113.1_end --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.2B_start.blast.out 2B_start LT934114.1_start --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.2B_end.blast.out 2B_end LT934114.1_end --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.3A_start.blast.out 3A_start LT934115.1_start --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.3A_end.blast.out 3A_end LT934115.1_end --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.3B_start.blast.out 3B_start LT934116.1_start --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.3B_end.blast.out 3B_end LT934116.1_end --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.4A_start.blast.out 4A_start LT934117.1_start --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.4A_end.blast.out 4A_end LT934117.1_end --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.4B_start.blast.out 4B_start LT934118.1_start --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.4B_end.blast.out 4B_end LT934118.1_end --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.5A_start.blast.out 5A_start LT934119.1_start --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.5A_end.blast.out 5A_end LT934119.1_end --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.5B_start.blast.out 5B_start LT934120.1_start --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.5B_end.blast.out 5B_end LT934120.1_end --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.6A_start.blast.out 6A_start LT934121.1_start --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.6A_end.blast.out 6A_end LT934121.1_end --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.6B_start.blast.out 6B_start LT934122.1_start --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.6B_end.blast.out 6B_end LT934122.1_end --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.7A_start.blast.out 7A_start LT934123.1_start --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.7A_end.blast.out 7A_end LT934123.1_end --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.7B_start.blast.out 7B_start LT934124.1_start --alignment_length 10000 --hstart 0 --hend 20000000
python hit_rename_synteny_blast.py K.SV.7B_end.blast.out 7B_end LT934124.1_end --alignment_length 10000 --hstart 0 --hend 20000000

/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in LT934111.1_end.fa -out 1A_end -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in LT934111.1_start.fa -out 1A_start -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in LT934112.1_end.fa -out 1B_end -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in LT934112.1_start.fa -out 1B_start -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in LT934113.1_end.fa -out 2A_end -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in LT934113.1_start.fa -out 2A_start -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in LT934114.1_end.fa -out 2B_end -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in LT934114.1_start.fa -out 2B_start -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in LT934115.1_end.fa -out 3A_end -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in LT934115.1_start.fa -out 3A_start -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in LT934116.1_end.fa -out 3B_end -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in LT934116.1_start.fa -out 3B_start -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in LT934117.1_end.fa -out 4A_end -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in LT934117.1_start.fa -out 4A_start -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in LT934118.1_end.fa -out 4B_end -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in LT934118.1_start.fa -out 4B_start -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in LT934119.1_end.fa -out 5A_end -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in LT934119.1_start.fa -out 5A_start -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in LT934120.1_end.fa -out 5B_end -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in LT934120.1_start.fa -out 5B_start -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in LT934121.1_end.fa -out 6A_end -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in LT934121.1_start.fa -out 6A_start -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in LT934122.1_end.fa -out 6B_end -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in LT934122.1_start.fa -out 6B_start -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in LT934123.1_end.fa -out 7A_end -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in LT934123.1_start.fa -out 7A_start -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in LT934124.1_end.fa -out 7B_end -dbtype 'nucl'
/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/makeblastdb -in LT934124.1_start.fa -out 7B_start -dbtype 'nucl'

/global/scratch/users/jiaqitang0422/Software/ncbi-blast-2.15.0+/bin/blastn -query /global/scratch/users/jiaqitang0422/Kronos/Chinese_spring/start_end/1A_end.fa -db ./CS_start_end/1A_end -outfmt "6 std qlen slen" -out K.CS.1A_end.blast.out -evalue 1e-6 
#!/bin/bash
#SBATCH --account=fc_kvkallow
#SBATCH --partition=savio3_htc
#SBATCH --nodes=1
#SBATCH --qos=savio_normal
#SBATCH --time=72:00:00

python synteny_blast.py K.CS.1A_end.blast.out 1A_end 1A_end --alignment_length 10000 --hstart 0 --hend 20000000
python synteny_blast.py K.CS.1B_end.blast.out 1B_end 1B_end --alignment_length 10000 --hstart 0 --hend 20000000
python synteny_blast.py K.CS.1B_start.blast.out 1B_start 1B_start --alignment_length 10000 --hstart 0 --hend 20000000
python synteny_blast.py K.CS.2A_end.blast.out 2A_end 2A_end --alignment_length 10000 --hstart 0 --hend 20000000
python synteny_blast.py K.CS.2A_start.blast.out 2A_start 2A_start --alignment_length 10000 --hstart 0 --hend 20000000
python synteny_blast.py K.CS.2B_end.blast.out 2B_end 2B_end --alignment_length 10000 --hstart 0 --hend 20000000
python synteny_blast.py K.CS.2B_start.blast.out 2B_start 2B_start --alignment_length 10000 --hstart 0 --hend 20000000
python synteny_blast.py K.CS.3A_end.blast.out 3A_end 3A_end --alignment_length 10000 --hstart 0 --hend 20000000
python synteny_blast.py K.CS.3A_start.blast.out 3A_start 3A_start --alignment_length 10000 --hstart 0 --hend 20000000
python synteny_blast.py K.CS.3B_end.blast.out 3B_end 3B_end --alignment_length 10000 --hstart 0 --hend 20000000
python synteny_blast.py K.CS.3B_start.blast.out 3B_start 3B_start --alignment_length 10000 --hstart 0 --hend 20000000
python synteny_blast.py K.CS.4A_end.blast.out 4A_end 4A_end --alignment_length 10000 --hstart 0 --hend 20000000
python synteny_blast.py K.CS.4A_start.blast.out 4A_start 4A_start --alignment_length 10000 --hstart 0 --hend 20000000
python synteny_blast.py K.CS.4B_end.blast.out 4B_end 4B_end --alignment_length 10000 --hstart 0 --hend 20000000
python synteny_blast.py K.CS.4B_start.blast.out 4B_start 4B_start --alignment_length 10000 --hstart 0 --hend 20000000
python synteny_blast.py K.CS.5A_end.blast.out 5A_end 5A_end --alignment_length 10000 --hstart 0 --hend 20000000
python synteny_blast.py K.CS.5A_start.blast.out 5A_start 5A_start --alignment_length 10000 --hstart 0 --hend 20000000
python synteny_blast.py K.CS.5B_end.blast.out 5B_end 5B_end --alignment_length 10000 --hstart 0 --hend 20000000
python synteny_blast.py K.CS.5B_start.blast.out 5B_start 5B_start --alignment_length 10000 --hstart 0 --hend 20000000
python synteny_blast.py K.CS.6A_end.blast.out 6A_end 6A_end --alignment_length 10000 --hstart 0 --hend 20000000
python synteny_blast.py K.CS.6A_start.blast.out 6A_start 6A_start --alignment_length 10000 --hstart 0 --hend 20000000
python synteny_blast.py K.CS.6B_end.blast.out 6B_end 6B_end --alignment_length 10000 --hstart 0 --hend 20000000
python synteny_blast.py K.CS.6B_start.blast.out 6B_start 6B_start --alignment_length 10000 --hstart 0 --hend 20000000
python synteny_blast.py K.CS.7A_end.blast.out 7A_end 7A_end --alignment_length 10000 --hstart 0 --hend 20000000
python synteny_blast.py K.CS.7A_start.blast.out 7A_start 7A_start --alignment_length 10000 --hstart 0 --hend 20000000
python synteny_blast.py K.CS.7B_end.blast.out 7B_end 7B_end --alignment_length 10000 --hstart 0 --hend 20000000
python synteny_blast.py K.CS.7B_start.blast.out 7B_start 7B_start --alignment_length 10000 --hstart 0 --hend 20000000




- RIdeogram: Ideogram plot with Kronos, NLR loci visualization through density
Converting global chromosomes fasta files into karyotype files
```

import sys
from Bio import SeqIO

# Check if the correct number of arguments is provided
if len(sys.argv) != 3:
    print("Usage: python3 fasta_to_karyotype.py <input_fasta> <output_karyotype>")
    sys.exit(1)

# Get file paths from command-line arguments
fasta_file = sys.argv[1]  # Input FASTA file
output_file = sys.argv[2]  # Output karyotype file

# Open output file for writing
with open(output_file, "w") as out:
    out.write("Chr\tStart\tEnd\tCE_start\tCE_end\n")  # Write header

    # Read FASTA file and extract chromosome lengths
    for record in SeqIO.parse(fasta_file, "fasta"):
        chrom_name = record.id  # Chromosome name
        chrom_length = len(record.seq)  # Chromosome length
        
        # Assign centromere positions (Estimated: midpoint ± 1%)
        CE_start = int(0.49 * chrom_length)
        CE_end = int(0.51 * chrom_length)

        # Write to karyotype file
        out.write(f"{chrom_name}\t0\t{chrom_length}\t{CE_start}\t{CE_end}\n")

print(f"Karyotype file saved as {output_file}")

```
Loading karyotype data into the Rideogram
```
setwd("/Users/r_upercut/Downloads/test/")

# Set file path
karyotype_file <- "/Users/r_upercut/Downloads/test/karyotype.txt"

# Read the karyotype file
karyotype <- read.table(karyotype_file, header = TRUE, sep = "\t")

# Print first few lines to check the structure
head(karyotype)

# Generate the idiogram (chromosome plot)
ideogram(karyotype = karyotype, output = "chromosome.svg")

convertSVG("chromosome.svg", device = "png")


```
Function name	Description
GFFex	Extract information from a GFF3 format genome annotation fill
ideogram	Map and visualize the genome-wide data on the idiograms
convertSVG	Convert the output file from the SVG format to the format users chose
svg2tiff	Convert the output file from the SVG format to the TIFF format
svg2pdf	Convert the output file from the SVG format to the PDF format
svg2jpg	Convert the output file from the SVG format to the JPG format
svg2png	Convert the output file from the SVG format to the PNG format

- Using NLR coordinates (gff3) and confidence list (tsv) to map NLRs loci onto ideogram
```
# Load required packages
library(RIdeogram)

# Set working directory
setwd("/Users/r_upercut/Downloads/test/ideogram")

# Load karyotype data
karyotype <- read.table("karyotype.txt", sep = "\t", header = TRUE, stringsAsFactors = FALSE)

# Extract NLR loci from GFF3 files using GFFex (Treat as Gene Density)
high_medium_nlr_density <- GFFex(input = "high_medium_NLRs.gff3", karyotype = "karyotype.txt", feature = "gene", window = 8000000)
low_nlr_density <- GFFex(input = "low_confidence_NLRs.gff3", karyotype = "karyotype.txt", feature = "gene", window = 8000000)

# Explicitly specify output file names
high_medium_svg <- "high_medium_NLRs.svg"
low_confidence_svg <- "low_confidence_NLRs.svg"

# Generate ideogram for High/Medium confidence NLRs (heatmap overlay)
ideogram(karyotype = karyotype, overlaid = high_medium_nlr_density, label_type = "heatmap", 
         colorset1 = c("#f7f7f7", "#e34a33"), output = high_medium_svg)
svg2pdf(high_medium_svg)
# Generate ideogram for Low confidence NLRs (heatmap overlay)
ideogram(karyotype = karyotype, overlaid = low_nlr_density, label_type = "heatmap", 
         colorset1 = c("#f7f7f7", "#e34a33"), output = low_confidence_svg)
svg2pdf(low_confidence_svg)

print("NLR ideograms generated successfully with heatmap overlay!")

```

